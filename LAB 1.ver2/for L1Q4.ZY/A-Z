public class A extends ConsoleCharacter {

    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLines(buff, 1, ROW - 1, new int[] {1, 5});
        plotHorizontalLines(buff, 2, 4, new int[] {0, 2});
        return buff;
    }
    public boolean[][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 2, ROW - 1, 5);
        plotVerticalLine(buff, 2, 3, 1);
        plotHorizontalLine(buff, 2, 4, 1);
        plotHorizontalLine(buff, 2, 3, ROW - 1);
        return buff;
    }
}

public class B extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 1);
        plotHorizontalLines(buff, 2, 3, new int[] {0, 2, 4});
        plotDotsInColumn(buff, 4, new int[] {1, 3});
        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 1);
        plotVerticalLines(buff, 2, 3, new int[] {1, 5});
        plotHorizontalLine(buff, 2, 3, 4);
        buff[1][3] = true;
        return buff;
    }
}

public class C extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 1);
        plotHorizontalLines(buff, 2, 5, new int[] {0, 4});
        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 1, ROW - 1, 1);
        plotHorizontalLines(buff, 2, 4, new int[] {1, 4});
        return buff;
    }
}

public class D extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 1);
        plotVerticalLine(buff, 1, 3, 5);
        plotHorizontalLines(buff, 2, 4, new int[] {0, 4});
        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 4);
        plotHorizontalLines(buff, 2, 3, new int[] {2, 4});
        buff[3][1] = true;
        return buff;
    }
}

public class E extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 1);
        plotHorizontalLines(buff, 2, 5, new int[] {0, 2, 4});
        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);
        plotHorizontalLine(buff, 1, 4, 2);
        plotHorizontalLine(buff, 2, 4, 4);
        buff[0][2] = buff[0][3] = buff[1][1] = buff[1][4] = buff[3][1] = true;
        return buff;
    }
}

public class F extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 1);
        plotHorizontalLine(buff, 2, 4, 0);
        plotHorizontalLine(buff, 2, 3, 2);

        return buff;
    }
    public boolean[][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 2);
        plotHorizontalLine(buff, 2, 4, 0);
        plotHorizontalLine(buff, 1, 5, 2);
        return buff;
    }
}

public class G extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 1);
        plotVerticalLine(buff, 2, ROW - 1, 5);
        plotHorizontalLine(buff, 1, 5, 0);
        plotHorizontalLine(buff, 3, 5, 2);
        plotHorizontalLine(buff, 1, 5, 4);
        return buff;
    }
    public boolean[][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, 2, 1);
        plotVerticalLine(buff, 0, ROW - 1, 4);
        plotHorizontalLines(buff, 2, 3, new int[] {0, 2, 4});
        buff[4][1] = true;
        return buff;
    }
}

public class H extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLines(buff, 0, ROW - 1, new int[] {1, 5});
        plotHorizontalLine(buff, 2, 4, 2);
        return buff;
    }
    public boolean[][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 1);
        plotVerticalLine(buff, 3, ROW - 1, 5);
        plotHorizontalLine(buff, 3, 4, 2);
//		buff[1][2] = true;
        return buff;
    }
}

public class I extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotHorizontalLines(buff, 1, 5, new int[] {0, 4});
        plotVerticalLines(buff, 1, 3, 3);
        return buff;
    }
    public boolean[][] getLowercase() {
        int column = 1;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 2, ROW - 1, 1);
        buff[0][1] = true;
        return buff;
    }
}

public class J extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotHorizontalLine(buff, 1, 5, 0);
        plotHorizontalLine(buff, 1, 3, ROW - 1);
        plotVerticalLine(buff, 1, 3, 4);
        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 2, ROW - 1, 4);
        plotVerticalLine(buff, 3, ROW - 1, 1);
        plotHorizontalLine(buff, 2, 3, ROW - 1);
        buff[0][4] = true;
        return buff;
    }
}

public class K extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 1);
        plotDotsInColumn(buff, 4, new int[] {0, 4});
        plotDotsInColumn(buff, 3, new int[] {1, 3});
        buff[2][2] = true;
        return buff;
    }
    public boolean[][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 1, ROW - 1, 1);
        plotDotsInColumn(buff, 3, new int[] {1, 3});
        buff[2][2] = buff[ROW - 1][4] = true;
        return buff;
    }
}

public class L extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, ROW - 1, 1);
        plotHorizontalLine(buff, 2, 5, ROW - 1);
        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 1, ROW - 1, 1);
        plotHorizontalLine(buff, 1, 4, ROW - 1);
        return buff;
    }
}

public class M extends ConsoleCharacter {
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLines(buff, 0, ROW - 1, new int[] {1, 5});
        plotSpecialDiagonalLeftTop(buff, 0, 2);
        plotDiagonalRightTop(buff, 0, 2);
        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 9;
        boolean[][] buff = getBuff(column + 2);
        plotDotsInRow(buff, 1, new int[] {2, 4, 6, 8});
        plotVerticalLines(buff, 2, ROW - 1, new int[] {1, 5, 9});
//		plotHorizontalLine(buff, 2, 3, 1);
//		plotHorizontalLine(buff, 5, 6, 1);
//		plotVerticalLines(buff, 2, ROW - 1, new int[] {1, 4, 7});
        return buff;
    }
}

public class N extends ConsoleCharacter {

    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);

        buff[1][2] = buff[2][3] = buff[3][4] = true;

        for (int i = 0; i < ConsoleCharacter.ROW; i++) {
            buff[i][1] = true;
            buff[i][5] = true;
        }

        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 1, ROW - 1, 0);
        buff[2][1] = buff[1][2] = buff[2][3] = true;
        plotVerticalLine(buff, 2, ROW - 1, 4);
        return buff;
    }
}

public class O extends ConsoleCharacter{

    public boolean [][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);

        plotHorizontalLine(buff, 2, 4, 0);
        plotHorizontalLine(buff, 2, 4, 4);
        plotVerticalLine(buff, 1, 3, 1);
        plotVerticalLine(buff, 1, 3, 5);
        return buff;
    }

    public boolean [][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);

        plotHorizontalLine(buff, 1, 2, 1);
        plotHorizontalLine(buff, 1, 2, 4);
        plotVerticalLine(buff, 2, 3, 0);
        plotVerticalLine(buff, 2, 3, 3);
        return buff;
    }
}

public class P extends ConsoleCharacter{

    public boolean [][] getUppercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);

        plotVerticalLine(buff, 0, ROW - 1 , 1);
        plotHorizontalLines(buff, 1, 3, 0);
        plotHorizontalLine(buff, 1, 3, 2);
        buff[1][4] = true;
        return buff;
    }

    public boolean [][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);

        plotVerticalLine(buff, 1, ROW - 1 , 0);
        plotHorizontalLines(buff, 0, 2, 1);
        plotHorizontalLine(buff, 0, 2, 3);
        buff[2][3] = true;
        return buff;
    }
}

public class Q extends ConsoleCharacter{

    public boolean [][] getUppercase() {
        int column = 6;
        boolean[][] buff = getBuff(column + 2);

        plotHorizontalLine(buff, 2, 4, 0);
        plotHorizontalLine(buff, 2, 4, 3);
        plotVerticalLine(buff, 1, 2, 1);
        plotVerticalLine(buff, 1, 2, 5);
        plotDiagonalLeftTop(buff, 3, 4);
        return buff;
    }

    public boolean [][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);

        plotHorizontalLine(buff, 1, 3, 0);
        plotHorizontalLine(buff, 1, 3, 2);
        plotVerticalLine(buff, 0, 4, 3);

        buff[1][0] = true;
        buff[3][4] = true;
        return buff;
    }
}

public class R extends ConsoleCharacter{

    public boolean [][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);

        plotVerticalLine(buff, 0, 4, 0);
        plotHorizontalLine(buff, 1, 2, 0);
        plotHorizontalLine(buff, 1, 2, 2);
        buff[1][3] = true;
        plotDiagonalLeftTop(buff, 2, 4);
        return buff;
    }

    public boolean [][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);

        plotVerticalLine(buff, 1, 4, 0);

        buff[2][1] = true;
        buff[1][2] = true;
        buff[1][3] = true;
        buff[2][4] = true;
        return buff;
    }
}

public class S extends ConsoleCharacter {

    public boolean[][] getUppercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);

        plotHorizontalLine(buff, 2, 3, 0);
        plotHorizontalLine(buff, 1, 2, 4);
        plotDiagonalLeftTop(buff, 1, 3);

        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);

        plotHorizontalLine(buff, 2, 3, 1);
        plotHorizontalLine(buff, 1, 2, 4);
        plotDiagonalLeftTop(buff, 2, 3);
        return buff;
    }
}

public class S extends ConsoleCharacter {

    public boolean[][] getUppercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);

        plotHorizontalLine(buff, 2, 3, 0);
        plotHorizontalLine(buff, 1, 2, 4);
        plotDiagonalLeftTop(buff, 1, 3);

        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);

        plotHorizontalLine(buff, 2, 3, 1);
        plotHorizontalLine(buff, 1, 2, 4);
        plotDiagonalLeftTop(buff, 2, 3);
        return buff;
    }
}


public class S extends ConsoleCharacter {

    public boolean[][] getUppercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);

        plotHorizontalLine(buff, 2, 3, 0);
        plotHorizontalLine(buff, 1, 2, 4);
        plotDiagonalLeftTop(buff, 1, 3);

        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 4;
        boolean[][] buff = getBuff(column + 2);

        plotHorizontalLine(buff, 2, 3, 1);
        plotHorizontalLine(buff, 1, 2, 4);
        plotDiagonalLeftTop(buff, 2, 3);
        return buff;
    }
}

public class V extends ConsoleCharacter{
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 0, 2, 0);
        plotVerticalLine(buff, 0, 2, 4);
        buff[3][1] = true;
        buff[4][2] = true;
        buff[3][3] = true;
        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);

        plotVerticalLine(buff, 2, 2, 0);
        plotVerticalLine(buff, 2, 2, 4);
        buff[3][1] = true;
        buff[4][2] = true;
        buff[3][3] = true;
        return buff;
    }
}

public class W extends ConsoleCharacter{
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotVerticalLine(buff, 1, 2, 0);
        plotVerticalLine(buff, 1, 2, 2);
        plotVerticalLine(buff, 1, 2, 4);
        buff[3][0] = true;
        buff[4][1] = true;
        buff[3][2] = true;
        buff[4][3] = true;
        buff[3][4] = true;

        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);

        plotVerticalLine(buff, 2, 2, 0);
        plotVerticalLine(buff, 2, 2, 2);
        plotVerticalLine(buff, 2, 2, 4);
        buff[3][0] = true;
        buff[4][1] = true;
        buff[3][2] = true;
        buff[4][3] = true;
        buff[3][4] = true;
        return buff;
    }
}

public class X extends ConsoleCharacter{
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);

        plotDiagonalLeftTop(buff, 0, 4);
//        plotDiagonalRightTop(buff, 0, 4);
        buff[4][0] = true;
        buff[3][1] = true;
        buff[2][2] = true;
        buff[1][3] = true;
        buff[0][4] = true;
        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotDiagonalLeftTop(buff, 1, 3);

        buff[3][1] = true;
        buff[2][2] = true;
        buff[1][3] = true;
        return buff;
    }
}

public class Y extends ConsoleCharacter{
    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);
        plotDiagonalLeftTop(buff, 0, 2);
        buff[1][3] = true;
        buff[0][4] = true;
        plotVerticalLine(buff, 2, 4, 2);

        return buff;
    }

    public boolean[][] getLowercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);

        plotVerticalLine(buff, 0, 4, 4);
        plotVerticalLine(buff, 0, 1, 0);
        plotVerticalLine(buff, 3, 4, 0);
        plotHorizontalLine(buff, 1, 3, 2);
        buff[4][2] = true;

        return buff;
    }
}

public class Z extends ConsoleCharacter{

    public boolean[][] getUppercase() {
        int column = 5;
        boolean[][] buff = getBuff(column + 2);

        buff[3][1] = buff[2][2] = buff[1][3] = true;

        for (int i = 0; i < ConsoleCharacter.ROW; i++) {
            buff[0][i] = true;
            buff[4][i] = true;
        }

        return buff;
    }

    public boolean[][] getLowercase() {

        int column = 4;
        boolean[][] buff = getBuff(column + 2);

        buff[2][2] = buff[3][1] = true;

        for (int i = 0; i < 4; i++) {
            buff[1][i] = true;
            buff[4][i] = true;
        }

        return buff;
    }
}
