public class ArrayBag<T> implements BagInterface<T>{
    private final int DEFAULT_CAPACITY=25;
    private T[] bag=(T[])new Object[DEFAULT_CAPACITY];
    private int numberOfEntries;
    ArrayBag(){

    }
    public int getCurrentSize(){
        return numberOfEntries;
    }
    public boolean isFull(){
        if(numberOfEntries==DEFAULT_CAPACITY){
            return true;
        }
        else{
            return false;
        }
    }
    public boolean isEmpty(){
        if(numberOfEntries==0){
            return true;
        }
        else{
            return false;
        }
    }
    public boolean add(T newEntry){
        if(isFull()) return false;
        bag[numberOfEntries++] = newEntry;
        return true;
    }
    public T remove(){
        if(isEmpty()) return null;
        T item = bag[--numberOfEntries];
        bag[numberOfEntries] = null;
        return item;
    }
    public boolean remove(T anEntry){
        int index= -1;
        for(int i=0;i<numberOfEntries;i++){
            if(bag[i].equals(anEntry)){
                index = i;
                break;
            }
            if(index== -1)return false;
        }
        bag[index]=bag[--numberOfEntries]; //replace original element with last element
        bag[numberOfEntries]=null;
        return true;
    }
    public void clear(){
        bag=(T[])new Object[DEFAULT_CAPACITY];
    }
    public int getFrequencyOf(T anEntry){
        int count=0;
        for(T item : bag) {
            if (item.equals(anEntry))
                count++;
        }
            return count;
        }

    public boolean contains(T anEntry){
        for(T item : bag)
            if(item.equals(anEntry))
                return true;
        return false;
    }
    public T[] toArray(){
        T[] arr = (T[]) new Object[numberOfEntries];
        System.arraycopy(bag, 0, arr, 0, numberOfEntries);
        return arr;
    }
    public BagInterface<T> union(BagInterface<? extends T> bag2) {
        ArrayBag<T> union = new ArrayBag<>();
        for (int i = 0; i < numberOfEntries; i++)
            union.add(bag[i]);
        T[] bag2Array = bag2.toArray();
        for (T item : bag2Array)
            union.add(item);
        return union;
    }

    public BagInterface<T> intersection(BagInterface<? extends T> bag2) {
        ArrayBag<T> intersection = new ArrayBag<>();
        T[] bag2Array = bag2.toArray();
        for (int i = 0; i < numberOfEntries; i++) {
            T item = bag[i];
            for (int j = 0; j < bag2Array.length; j++) {
                if (item.equals(bag2Array[j])) {
                    intersection.add(item);
                    bag2Array[j] = null; //avoid duplicate item in intersectio
                    break;
                }
            }
        }
        return intersection;
    }

    public BagInterface<T> difference(BagInterface<? extends T> bag2) {
        ArrayBag<T> difference = new ArrayBag<>();
        for (int i = 0; i < numberOfEntries; i++)
            difference.add(bag[i]);
        T[] bag2Array = bag2.toArray();
        for (T t : bag2Array)
            difference.remove(t);
        return difference;
    }
}
