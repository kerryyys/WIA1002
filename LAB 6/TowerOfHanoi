package LAB6;

import java.util.*; 
public class L6Q5test {
    public static int N; 
    /* Creating Stack array */ 
    public static Stack<Integer>[] tower = new Stack[4]; 
    public static void main(String[] args) { 
        Scanner scan = new Scanner(System.in); 
        tower[1] = new Stack<Integer>(); 
        tower[2] = new Stack<Integer>(); 
        tower[3] = new Stack<Integer>(); 

        /* Accepting number of disks */ 
        System.out.println("Enter number of disks"); 
        int num = scan.nextInt(); 
        N = num; 
        toh(num); 
    } 

    /* Function to push disks into stack */ 
    public static void toh(int n) { 

        for (int d = n; d > 0; d‐‐) 
            tower[1].push(d); 
        display(); 
        move(n, 1, 2, 3); 
    } 

    /* Recursive Function to move disks */ 
    public static void move(int n, int a, int b, int c) { 
        if (n > 0) 
        { 
            move(n‐1, a, c, b); 
            int d = tower[a].pop(); 
            tower[c].push(d); 
            display(); 
            move(n‐1, b, a, c); 
        } 
    } 

    /* Function to display */ 
    public static void display() { 
        System.out.println(" A | B | C"); 
        System.out.println("‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐"); 
        for(int i = N ‐ 1; i >= 0; i‐‐) 
        { 
            String d1 = " ", d2 = " ", d3 = " "; 
            try { 
                d1 = String.valueOf(tower[1].get(i)); 
            } 
            catch (Exception e){ } 
            try { 
                d2 = String.valueOf(tower[2].get(i)); 
            } 
            catch(Exception e){ } 
            try { 
                d3 = String.valueOf(tower[3].get(i)); 
            } 
            catch (Exception e){ } 
            System.out.println(" "+d1+" | "+d2+" |  "+d3); 
        } 
        System.out.println("\n"); 
    } 
} 

 

 
 

Solution Walkthrough using Example 
Function toh 
If d=3 
For loop will be iterated for 3 times (when d=3, d=2 and d=1) 
tower[1] will consists of 1, 2, 3 (remember the rules of TOH, larger at the bottom) 
display() to display the current plate on each tower  
//tower[1]={1, 2, 3}; tower[2]={}; tower[3]={} 
Start the recursive function by calling move(n, 1, 2, 3) 
Function move (n=3, a=1, b=2, c=3) 
1           If (n>0) //yes 
                call move(n-1=2, a=1, b=3, c=2) 
1.1.        in move(n=2, a=1, b=3, c=2) 
            if (n>0) //yes 
                  call move(n-1=1, a=1, b=2, c=3) 
1.1.1         in move(n=1, a=1, b=2, c=3) 
                  if (n>0) //yes 
                call move(n-1=0, a=1, b=3, c=2) 
1.1.1.1           in move(n=0, a=1, b=3, c=2) 
                    if(n>0) //NO 
                    quit 1.1.1.1, go back to 1.1.1 
1.1.1       (cont)    d=tower[1].pop à d=1 
                    tower[3].push(1) 
                    display() //tower[1] ={2, 3]; tower[2]={}; tower3={1} 
                    call move(n-1=0, a=1, b=2, c=3) 
1.1.1.2          in move(n=0, a=2, b=1, c=3) 
                if(n>0) //NO 
                    quit 1.1.1.2, go back to 1.1.1 
1.1.1       (cont)  completed this round, go back to 1.1 
1.1         (cont) d=tower[1].pop à d=2 
                  tower[2].push(2) 
                  display() //tower[1]={3}; tower[2]={2}; tower[3]={1} 
                  call move(n-1=1, a=3, b=1, c=2) 
1.1.2          in move(n=1, a=3, b=1, c=2) 
                   if (n>0) // yes 
                    call move(n-1=0, a=3, b=2, c=1) 
1.1.2.1            in move(n=0, a=3, b=2, c=1) 
                    if (n>0) //NO 
                    quit 1.1.2.1, go back to 1.1.2 
1.1.2       (cont)d=tower[3].pop() àd=1 
                   tower[2].push(1) 
                   display() //tower[1]={3}; tower[2]={1, 2}; tower[3]={} 
                   call move(n-1=0, a=1, b=3, c=2) 
1.1.2.2.      in move(n=0, a=1, b=3, c=2) 
                   if (n>0) //NO 
                   quit 1.1.2.2, go back to 1.1.2 
1.1.2       (cont)completed this round, go back to 1.1 
1.1         (cont)completed this round, go back to 1 
1           (cont)d=tower[1].popàd=3 
             tower[3].push(3) 
             display() // tower[1]={}; tower[2]={1, 2}; tower[3]={3} 
             call move(n-1=2, a=2, b=1, c=3) 
1.2.       in move(n=2, a=2, b=1, c=3) 
             if (n>0) //yes 
                call move (n-1=1, a=2, b=3, c=1) 
1.2.1           in move(n=1, a=2, b=3, c=1) 
                if (n>0) //yes 
                call move(n-1=0, a=2, b=1, c=3) 
1.2.1.1         in move (n=0, a=2, b=1, c=3) 
                if (n>0) //NO 
                quit 1.2.1.1, go back to 1.2.1 
1.2.1       (cont) d=tower[2].pop à d=1 
                tower[1]=push(1) 
                display() //tower[1]={1}; tower[2]={2}; tower[3]={3} 
                call move (n-1=0, a=3, b=2, c=1) 
1.2.1.2        in move(n-0, a=3, b=2, c=1) 
                if (n>0) //NO 
                quit 1.2.1.2, go back to 1.2.1 
1.2.1       (cont) completed this round, go back to 1.2 
1.2         (cont) d=tower[2].pop à d=2 
                 tower[3].push(2) 
                 display() //tower[1]={1}; tower[2]={}; tower[3]={2, 3} 
                 call move (n-1=1, a=1, b=2, c=3) 
1.2.2        in move(n=1, a=1, b=2, c=3) 
                 if(n>0) //yes 
                call move (n-1=0, a=1, b=3, c=2) 
1.2.2.1         in move(n=0, a=1, b=3, c=2) 
                if(n>0) //NO 
                quit 1.2.2.1, go back to 1.2.2 
1.2.2       (cont)d=tower[1].push àd=1 
            tower[3].push(1) 
            display() //tower[1]={}; tower[2]={}; tower[3]={1, 2, 3} 
            call move(n-1=0, a=2, b=1, c=3) 
1.2.2.2.      in move(n=0, a=2, b=1, c=2) 
                if(n>0) //NO 
                quit 1.2.2.2, go back to 1.2.2 
1.2.2       (cont) completed this round, go back to 1.2 
1.2         (cont) completed this round, go back to 1 
1           (cont) completed this round, go back to caller toh() 

