Given a string s, find the first non-repeating character in it and return its index. 
If it does not exist, return -1. Solve using queue. 


Example 1: 
Input: s = "leetcode" 
Output: 0 
 

Example 2: 
Input: s = "loveleetcode" 
Output: 2 

Example 3: 
Input: s = "aabb" 
Output: -1 

 

class Solution { 

    public int firstUniqChar(String s) { 

    } 
} 

Implement a last-in-first-out (LIFO) stack using only two queues. 
The implemented stack should support all the functions of a normal stack (push, top, pop, and empty). 

2. Implement the MyStack class: 
void push(int x) Pushes element x to the top of the stack. 
int pop() Removes the element on the top of the stack and returns it. 
int top() Returns the element on the top of the stack. 
boolean empty() Returns true if the stack is empty, false otherwise. 

Example 1: 
Input
 ["MyStack", "push","push","top","pop","empty"]
 [[],[1],[2],[],[],[]]
 Output
 [null,null,null,2,2,false]
 
 EXPLAINATION
 MyStack nyStack = new MyStack();
 myStack.push(1);
 myStack.push(2);
 myStack.top(); //return 2
 myStack.pop(); //return 2
 myStack.empty(); // return False
 
class MyStack { 

public: 
    MyStack() { 
    } 

    void push(int x) { 

    } 

    int pop() { 

    } 

     

    int top() { 
    } 

    bool empty() { 
    } 
}; 

/** 
 * Your MyStack object will be instantiated and called as such: 
 * MyStack* obj = new MyStack(); 
 * obj->push(x); 
 * int param_2 = obj->pop(); 
 * int param_3 = obj->top(); 
 * bool param_4 = obj->empty(); 
 */ 
