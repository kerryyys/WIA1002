Create a class called FindMax that contains the following:
Create a Circle class that uses the Comparable interface. Declare the
radius variable and a single parameterized constructor that accepts
this variable.
In your main program, create 3 different objects of type array (a) for
integers that stores the following values, 1,2,3; (b) a list of string that
stores red, green, blue and (c) a circle object of radius 3, 2.9 and 5.9.
Invoke the max method as below:
public static <E extends Comparable<E>> E max(E[] list)
The max method above returns the maximum value in an array.

public class FindMax {
    static class Circle implements Comparable<Circle>{
        private double radius;
        Circle(double radius){
            this.radius=radius;
        }
        public double getRadius(){
            return radius;
        }
        public int compareTo(Circle other){
            return Double.compare(radius,other.radius);
        }
    }

    public static <E extends Comparable <E>>E max(E[] list){
        E max=list[0];
        for(int i=1;i<list.length;i++){
            if(list[i].compareTo(max)>0){
                max=list[i];
            }
        }
        return max;
    }
    public static void main(String[] args){
        Integer [] intarray={1,2,3};
        String[] strarray={"red","green","blue"};
        Circle[] circleArray={new Circle(3),new Circle(2.9),new Circle(5.9)};
        System.out.println("Max of intArray: "+max(intarray));
        System.out.println("Max of String Array: "+max(strarray));
        System.out.println("Max of circle Array: "+max(circleArray).getRadius());
    }
}




The reason why this is possible is because in Java, integer values can be automatically 
promoted to double values without any loss of information or precision.

When an integer value is used in a context that expects a double value, the integer value 
is implicitly converted to a double value. For example, in the constructor of the Circle class,
the integer value 3 is passed as an argument to the constructor, but it is automatically 
promoted to a double value of 3.0 to match the type of the radius field.
