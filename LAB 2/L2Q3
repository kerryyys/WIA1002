Part (a)
public class StorePairGeneric<T>{
    private T first;
    private T second;

    StorePairGeneric(T first, T second){
        this.first=first;
        this.second=second;
    }
    public T getFirst(){
        return first;
    }
    public T getSecond(){
        return second;
    }
    public void setPair(T first, T second){
        this.first=first;
        this.second=second;
    }
    public String toString(){
        return "first= " + first + " second= "+second;
    }
}

Part (b)
 public boolean equals(Object o) {
        if (this == o) {
        return true;
        }
        
        if (o == null || getClass() != o.getClass()) {                        //可以if (!(o instanceof StorePairGeneric)) return false;
        return false;
        }
        
        StorePairGeneric<T> storePair = (StorePairGeneric<T>) o;                //为了cast o成为storepair ，Without this cast, the compiler wouldn't know that obj is an instance of MyClass and wouldn't allow access to its fields.
        return this.first.equals(storePair.first);
    }

getClass为了确保是一样的class才可以compare
check whether the obj parameter is an instance of the StorePair class and then assign it to a variable storePair.

StorePair<?> storePair = (StorePair<?>) o; 是当class是generic的时候用的，如果我们现在用的是普通storepair，只要用 SP sp=（SP） o；
We need to cast the anotherObject parameter to StorePairGeneric<T> because in the equals method, we need to access the first field of the StorePairGeneric object. 
However, the Object class, which is the superclass of all classes in Java, does not have the first field. 
Therefore, we need to cast anotherObject to StorePairGeneric<T> so that we can access the first field of the object and compare it with the first field of this object.

Checking the class of the object using the getClass() method is not necessary in this case 
because the instanceof keyword already checks if the object is an instance of the specified class or any of its subclasses.


Part (c)

    @Override
    public int compareTo(StorePairGeneric<T> other) {
        return this.first.compareTo(other.first);
    }
}
    
    //Integer.compare method, which returns -1 if the first object is less than the second object, 
    0 if the two objects are equal, and 1 if the first object is greater than the second object.
    
    
    
Part(d)
public class StorePairTest {
    public static void main(String[] args) {
        StorePairGeneric<Integer> a = new StorePairGeneric<>(6, 4);
	StorePairGeneric<Integer> b = new StorePairGeneric<>(2, 2);
        StorePairGeneric<Integer> c = new StorePairGeneric<>(6, 3);
    }
}

Part(e)
public class Main {
    public static void main(String[] args) {
        StorePairGeneric<Integer> a = new StorePairGeneric<>(6, 4);
	StorePairGeneric<Integer> b = new StorePairGeneric<>(2, 2);
        StorePairGeneric<Integer> c = new StorePairGeneric<>(6, 3);
        
        System.out.println(a.compareTo(b));  //print 1
        System.out.println(a.compareTo(c));  //print 0
        System.out.println(b.compareTo(c));  //print -1
        System.out.println(a.equals(b));     //print false
        System.out.println(a.equals(c));    //print true
        System.out.println(b.equals(c));    //print false
    }
}
