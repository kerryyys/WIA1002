GENERIC CLASS FORMAT
public class MyClass<T> {
    // class body
}
也有看情况的
public class StorePairGeneric <T extends Comparable<T>>implements Comparable<StorePairGeneric<T>>
((((the StorePairGeneric class implements the Comparable interface with the same type parameter T. 
This means that instances of StorePairGeneric can be compared to each other using the compareTo method.)))))))))


public class TextFileLog<T> implements SimpleLog<T>
意思就是TFL&SL 可以define as anyType , ex: TFL<String> implement SL<String>


GENERIC METHOD FORMAT
public <T> void myMethod(T param) {
    // method body
}


为什么要用Comparable interface？

The Comparable interface is used to define a natural ordering of objects. 
It provides a way for objects to be compared to each other and sorted in a specific order.

When a class implements the Comparable interface, it must provide an implementation for the compareTo() method, 
which takes another object of the same type as an argument and returns an integer value. 
The compareTo() method compares the object with the argument object and returns a negative integer, zero, or a positive integer, 
depending on whether the object is less than, equal to, or greater than the argument object, respectively.

Using Comparable allows for a more flexible and modular way of comparing objects. 
For example, when sorting a list of objects, 
you can simply call the sort() method of the Collections class and it will use the compareTo() method of the objects to sort them in ascending order.

Using the normal comparison operators like a > b only works for primitive data types, not for objects. 
Therefore, to compare objects, we need to use a method like compareTo() that is specifically designed for that purpose.


what is the difference between <T extends Comparable<T>> and <T extends Comparable>?


如果用without <T>的，比如
public class MyClass<T extends Comparable> {
    private T value;

    public int compareTo(MyClass<T> other) {
        return value.compareTo(other.value);
    }
}
The second syntax, <T extends Comparable>, means that the type parameter "T" must implement the "Comparable" interface with any type. 
This is called a wildcard type parameter. 
It allows objects of different types to be compared, but can result in runtime errors if objects of incompatible types are compared.

In this example, the type parameter "T" is bounded to the "Comparable" interface, but can be replaced with any type that implements the "Comparable" interface. 
The "compareTo" method compares the value of the current object with the value of another object of any type that implements "Comparable", 
but could potentially result in a runtime error if objects of incompatible types are compared.

如果用with <T>的，
The first syntax, <T extends Comparable<T>>, means that the type parameter "T" must implement the "Comparable" interface with the same type "T". 
This is called a self-bounded type parameter. It ensures that the objects of type "T" can be compared to each other, 
and provides type safety by ensuring that only objects of the same type can be compared.

the type parameter "T" is self-bounded, and can only be replaced with a type that implements the "Comparable" interface with the same type "T". 
The "compareTo" method compares the value of the current object with the value of another object of the same type.


In summary, the difference between <T extends Comparable<T>> and <T extends Comparable> is in the bounds of the type parameter. 
The first syntax provides type safety by ensuring that objects of the same type can be compared, 
while the second syntax allows objects of different types to be compared, but can result in runtime errors.
