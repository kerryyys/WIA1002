Create a class that used to generate N number of non-duplicate integer in between 0 â€“ 100. 
The class must display the number in sorted list. 
The class must be generic to support array and linked-list implementation.

import java.util.Random;
import java.util.List;
import java.util.Collections;
import java.util.Set;
import java.util.HashSet;
public class NonDuplicate <T extends List<Integer>> {
    private static final int LOWER = 0;
    private static int UPPER = 100;

    private T list;
    private int lowerbound;
    private int upperbound;

    public NonDuplicate(T list){
        this(list,LOWER,UPPER);
    }
    NonDuplicate(T list, int lowerbound, int upperbound){
        this.list = list;
        this.lowerbound = lowerbound;
        this.upperbound = upperbound;

    }
    public T implement(int size){
        Random rand = new Random();
        Set<Integer> set = new HashSet<>();
        while(set.size() < size)
            set.add(rand.nextInt(upperbound - lowerbound +1)+lowerbound);
        list.addAll(set);
        Collections.sort(list);
        return list;
    }
}

import java.util.ArrayList;
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        final int N = 20;
        System.out.printf("Generate %d non-duplicate integer within 0-100\n", N);
        System.out.println("LinkedList Implementation");
        NonDuplicate<ArrayList<Integer>> non1 = new NonDuplicate<>(new ArrayList<>());
        ArrayList<Integer> list1 = non1.implement(20);
        list1.forEach(val -> System.out.print(val + " "));

        System.out.println();

        System.out.println("Array Implementation");
        NonDuplicate<LinkedList<Integer>> non2 = new NonDuplicate<>(new LinkedList<>());
        LinkedList<Integer> list2 = non2.implement(20);
        list2.forEach(val -> System.out.print(val + " "));
    }
}
