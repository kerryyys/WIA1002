//Create an ADT for the UNO card. This ADT contains the following specifications.
// A method to draw the card for a number of times.
// A toString method that returns the value of each card drawed.
//Implement the ADT using Array and LinkedList. Create a Tester class to test the program.
public class UNOCard {
    static final String[] COLOR = {"Red", "Yellow", "Green", "Yellow"};
    static final String[] TYPE = {"One", "Two", "Three", "Four", "Five", "Six", "Seven",
            "Eight", "Nine", "Skip", "Reverse", "Draw Two"};

    private String colour;
    private String type;

    UNOCard(String colour, String type) {
        this.colour = colour;
        this.type = type;
    }

    @Override
    public String toString() {
        return String.format("%s %s", this.colour, this.type);
    }
}


import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;

public class UNOGame {
    private Set<Integer> set;

    public void newGame() {
        if(set == null)
            set = new HashSet<>();
        else
            set.clear();
    }

    public UNOCard[] drawArray(int num) {
        if(num > 48 - set.size())
            return null;

        UNOCard[] cards = new UNOCard[num];
        for(int i = 0; i < num; ) {
            int val = (int)(Math.random() * 48);
            if(set.add(val))
                cards[i++] = new UNOCard(UNOCard.COLOR[val / 12], UNOCard.TYPE[val % 12]);
        }
        return cards;
    }

    public LinkedList<UNOCard> drawLinkedList(int num) {
        if(num > 48 - set.size())
            return null;

        LinkedList<UNOCard> cards = new LinkedList<>();
        while(cards.size() < num) {
            int val = (int)(Math.random() * 48);
            if(set.add(val))
                cards.add(new UNOCard(UNOCard.COLOR[val / 12], UNOCard.TYPE[val % 12]));
        }
        return cards;
    }

}


import java.util.LinkedList;
public class Main {
    public static void main(String[] args) {
        UNOGame game = new UNOGame();
        int times = 7;

        game.newGame();
        System.out.println("Array Implementation");
        System.out.printf("Player 1 draws %d times\n", times);
        UNOCard[] card1 = game.drawArray(7);
        for(UNOCard card : card1)
            System.out.print(card + " :: ");
        System.out.println();

        System.out.println("Array Implementation");
        System.out.printf("Player 2 draws %d times\n", times);
        UNOCard[] card2 = game.drawArray(7);
        for(UNOCard card : card2)
            System.out.print(card + " :: ");
        System.out.println();

        System.out.println();

        game.newGame();
        System.out.println("LinkedList Implementation");
        System.out.printf("Player 1 draws %d times\n", times);
        LinkedList<UNOCard> card3 = game.drawLinkedList(7);
        for(UNOCard card : card3)
            System.out.print(card + " :: ");
        System.out.println();

        System.out.println("LinkedList Implementation");
        System.out.printf("Player 2 draws %d times\n", times);
        LinkedList<UNOCard> card4 = game.drawLinkedList(7);
        for(UNOCard card : card4)
            System.out.print(card + " :: ");
        System.out.println();
    }
}




NOTE
为什么要/12 %12
The color can be determined by integer division val / 12, which will result in a value between 0-3, each corresponding to a color in the UNOCard.COLOR array.
The type can be determined by taking the remainder of val divided by 12, which will result in a value between 0-11, each corresponding to a type in the UNOCard.TYPE array.

关于set的存在
In this code, the set size is determined by the number of elements that have been added to it using the add method. 
The set data structure in Java is implemented as a hash table which dynamically resizes as elements are added or removed. 
Therefore, you do not need to determine the size of the set beforehand as it will grow or shrink dynamically based on the number of elements that are added or removed.
