Implement the following methods from tutorial in this class:
a. public void addFirst(E e)
b. public void addLast(E e)
c. public void add(int index, E e)
d. public E removeFirst()
e. public E removeLast()
f. public E remove(int index)


public class MyLinkedList<E> {
     private Node<E> head;
     private Node<E> tail;
    int size;
    public MyLinkedList(){
        head=null;
        tail=null;
    }
    public void addFirst(E e){
       Node<E> newHead=new Node<E>(e);
        newHead.next=head;
        if(tail == null)
            tail = head;
        head = newHead;
        size++;
    }
    public void addLast(E e){
        Node<E> newTail=new Node<E>(e);
        if(tail == null){
            head=tail=newTail;
        }
        else
            tail.next=newTail;
        tail=newTail;
        size++;
    }
    public void add(int index, E e){
        if(index<=0){
            addFirst(e);
            return;
        }
        try{
            Node<E>beforeToAdd=head;
            for(int i=1; i<index;i++)
                beforeToAdd = beforeToAdd.next;

            Node<E> toAdd = new Node<>(e);
            toAdd.next = beforeToAdd.next;
            beforeToAdd.next=toAdd;
            if(toAdd.next == null)
                tail = toAdd;
        }catch (NullPointerException ex){
            addLast(e);
        }
    }
    public E removeFirst(){
        if (head == null) return null;
        E item = head.element;
        head = head.next;
        if (head == null) tail = null;
        return item;
    }
    public E removeLast(){
        if (tail == null) return null;
        E item = tail.element;
        if (head == tail) {
            head = tail = null;
            return item;
        }
        Node<E> beforeLast = head;
        while (beforeLast.next.next != null)
            beforeLast = beforeLast.next;
        beforeLast.next = null;
        tail = beforeLast;

        return item;
    }

    public E remove(int index){
        if (index < 0) return null;
        if (index == 0) return removeFirst();

        try {
            Node<E> beforeToRemove = head;
            for (int i = 1; i < index; i++)
                beforeToRemove = beforeToRemove.next;
            E item = beforeToRemove.next.element;
            beforeToRemove.next = beforeToRemove.next.next;
            if (beforeToRemove.next == null) tail = beforeToRemove;

            return item;

        } catch (NullPointerException ex) {
            return null;
        }
    }

    public void add(E e) {
        addLast(e);
    }
