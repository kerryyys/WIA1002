Expand the MyLinkedList by implementing the following methods:
public boolean contains(E e)
Return true if list contains the element e
public E get(int index)
Return element at the specified index
public E getFirst()
Return the value of the first item
public E getLast()
Return the value of the last item
public int indexOf(E e)
Return the index of the head matching element in this list. Return -1 of no match
public int lastIndexOf(E e)
Return the index of the last matching element in this list. Return -1 of no match
public E set(int index,E e)
Replace the element at the specified position in this list with the specified element
public void clear()
Clear the list
public void print()
Print all the elements in the list
public void reverse()
Print all elements in reverse order

public class MyLinkedList<E> {
     private Node<E> head;
     private Node<E> tail;
    int size;
    public MyLinkedList(){
        head=null;
        tail=null;
    }
    public void addFirst(E e){
       Node<E> newHead=new Node<E>(e);
        newHead.next=head;
        if(tail == null)
            tail = head;
        head = newHead;
        size++;
    }
    public void addLast(E e){
        Node<E> newTail=new Node<E>(e);
        if(tail == null){
            head=tail=newTail;
        }
        else
            tail.next=newTail;
        tail=newTail;
        size++;
    }
    public void add(int index, E e){
        if(index<=0){
            addFirst(e);
            return;
        }
        try{
            Node<E>beforeToAdd=head;
            for(int i=1; i<index;i++)
                beforeToAdd = beforeToAdd.next;

            Node<E> toAdd = new Node<>(e);
            toAdd.next = beforeToAdd.next;
            beforeToAdd.next=toAdd;
            if(toAdd.next == null)
                tail = toAdd;
        }catch (NullPointerException ex){
            addLast(e);
        }
    }
    public E removeFirst(){
        if (head == null) return null;
        E item = head.element;
        head = head.next;
        if (head == null) tail = null;
        return item;
    }
    public E removeLast(){
        if (tail == null) return null;
        E item = tail.element;
        if (head == tail) {
            head = tail = null;
            return item;
        }
        Node<E> beforeLast = head;
        while (beforeLast.next.next != null)
            beforeLast = beforeLast.next;
        beforeLast.next = null;
        tail = beforeLast;

        return item;
    }

    public E remove(int index){
        if (index < 0) return null;
        if (index == 0) return removeFirst();

        try {
            Node<E> beforeToRemove = head;
            for (int i = 1; i < index; i++)
                beforeToRemove = beforeToRemove.next;
            E item = beforeToRemove.next.element;
            beforeToRemove.next = beforeToRemove.next.next;
            if (beforeToRemove.next == null) tail = beforeToRemove;

            return item;

        } catch (NullPointerException ex) {
            return null;
        }
    }

   /* public void add(E e) {
        addLast(e);
    }
    */
    public boolean contains(E e){
        for (Node<E> current = head; current != null; current = current.next) //for loop used to traverse a linked list.
            if (e.equals(current.element))
                return true;
        return false;
    }
    public E getFirst(){
        if(head==null)
            return null;
        return head.element;
    }
    public E getLast(){
        if(tail==null)
            return null;
        return tail.element;
    }
    public E get(int index){
        if (index < 0) return null;
        try {
            Node<E> current = head;
            while (index-- > 0) //check if>=0 or not
                current = current.next;
            return current.element;
        } catch (NullPointerException ex) {
            return null;
        }
    }
   /* Node<E>node(int index){
        Node<E>node=head;
        for(int i=0;i<index;i++)
            node=node.next;
        return node;
    } */
    public int indexOf(E e){
        int index=0;
        for(Node <E> node = head; node!=null; node = node.next){
            if(node.element.equals(e))
                return index;
            index++;
        }
        return -1;
    }
    public int lastIndexOf(E e){ //find from tail, but not last element , not so understand
        int index = -1;
        int i = 0;
        for (Node<E> current = head; current != null; current = current.next) {
            if (e.equals(current.element))
                index = i;
            i++;
        }
        return index;
    }
    public E set(int index,E e){
        if (index < 0) return null;
        try {
            Node<E> current = head;
            while (index-- > 0)
                current = current.next;

            E temp = current.element;
            current.element = e;
            return temp;

        } catch (NullPointerException ex) {
            return null;
        }
    }
    public void clear(){
       head=tail=null;
    }
    public void print(){
        for (Node<E> current = head; current != null; current = current.next)
            System.out.print(current.element + " ");
        System.out.println();
    }
    public void reverse(){
        String s="";
        for(Node<E>current=head;current!=null;current=current.next)
            //for loop that uses a node-based data stru.It initializes a current node to the head of the list and then iterates over the list until the current node becomes null
            // (i.e., the end of the list has been reached). In each iteration,
            // the current node is updated to point to the next node in the list by setting it to current.next.
            s = current.element+" "+s;
            System.out.println(s);
        
    }
}
